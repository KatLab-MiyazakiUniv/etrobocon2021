name: Simulator Test

on: [pull_request]

jobs:
  build-check:
    runs-on: ubuntu-20.04
    env:
      IMAGE: github-actions-etrobocon2021
      APP_NAME: etrobocon2021

    steps:
      # ${{ github.workspace }} を使用するために必要
      - name: Checkout
        uses: actions/checkout@v2

      # ログイン
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker image を GitHub Container Registry から Pull して、
      # 実際に etrobo 環境でのビルドが実行できるかどうか確認する
      # https://docs.github.com/ja/packages/working-with-a-github-packages-registry/working-with-the-container-registry
      - name: ETRobocon build test
        run: |
          docker run -e APP_NAME=${{ env.APP_NAME }} \
                     -v ${{ github.workspace }}:/tmp/${{ env.APP_NAME }}:rw \
                     ghcr.io/katlab-miyazakiuniv/${{ env.IMAGE }}:latest

  simulator-test:
    runs-on: self-hosted
    needs: build-check
    env:
      ETROBO_ROOT: /home/etrobocon2021/etrobo
      SIM_LOG_FILE: sim-log.txt
      MP4_SERVER_NAME: etrobocon2021.moyashi.dev

    steps:
    - uses: actions/checkout@v2

    # シミュレータテストのための下準備
    - name: Set up simulator
      shell: bash
      run: |
        # 一時ファイル、ディレクトリの作成
        TMP_CAPTURE_DIR=$(mktemp -d)
        TMP_SETTINGS_FILE=$(mktemp --suffix=.json)

        # キャプチャ関連の設定 (FPS=30)
        cat ${{ github.workspace }}/sim-settings/default.json | \
          jq ".captureDir=\"${TMP_CAPTURE_DIR}\"" | \
          jq ".captureRate=\"2\"" > ${TMP_SETTINGS_FILE}

        # 環境変数へ保存
        echo TMP_CAPTURE_DIR=$TMP_CAPTURE_DIR >> $GITHUB_ENV
        echo TMP_SETTINGS_FILE=$TMP_SETTINGS_FILE >> $GITHUB_ENV

    # シミュレータを研究室のPCで実行する
    - name: Test on simulator
      shell: bash
      run: |
        export DISPLAY=:0
        SIM_COMMANDS=''
        # etrobo環境に、etrobocon2021リポジトリへのシンボリックリンクを作成
        SIM_COMMANDS+='if [ -d ${ETROBO_HRP3_WORKSPACE}/etrobocon2021 ]; then rm -rf ${ETROBO_HRP3_WORKSPACE}/etrobocon2021; fi; '
        SIM_COMMANDS+='ln -s ${{ github.workspace }} ${ETROBO_HRP3_WORKSPACE}/etrobocon2021; '

        # シミュレータの設定を反映
        SIM_COMMANDS+='curl -X POST -H \"Content-Type: application/json\" -d @${{ env.TMP_SETTINGS_FILE }} http://localhost:54000; '
        
        # シミュレーションの実行
        SIM_COMMANDS+='make left app=etrobocon2021 sim up; '

        # 後始末
        SIM_COMMANDS+='unlink ${ETROBO_HRP3_WORKSPACE}/etrobocon2021; '

        # etrobo環境で上述のコマンドを実行
        echo ${SIM_COMMANDS} | ${HOME}/startetrobo shell | tee ${SIM_LOG_FILE}

    # シミュレータのキャプチャ映像をMP4に変換する
    - name: Convert capture image to MP4
      shell: bash
      run: |
        # ディレクトリの生成
        MP4_DIR=mp4s/$(date '+%Y-%m-%d/%H-%M-%S')
        mkdir -p ${HOME}/Videos/${MP4_DIR}

        # シミュレータのキャプチャ映像をMP4に変換
        ffmpeg -y \
               -framerate 30 \
               -i ${{ env.TMP_CAPTURE_DIR}}/L_%08d.png \
               -vcodec libx264 -pix_fmt yuv420p \
               -r 30 ${HOME}/Videos/${MP4_DIR}/${{ github.sha }}.mp4

        # CSVファイルのコピー
        cp ${{ env.TMP_CAPTURE_DIR}}/*.csv ${HOME}/Videos/${MP4_DIR}/${{ github.sha }}.csv

        # CSVファイルをJSONファイルに変換(OSの差異による改行文字の違いに注意)
        jq --compact-output -s -R 'split("\n")|map(split(","))|map({
            "Time": .[0], 
            "Counter": .[1], 
            "Filename": .[2], 
            "TIME": .[3], 
            "MEASUREMENT_TIME": .[4], 
            "RUN_TIME": .[5], 
            "GATE1": .[6], 
            "GATE2": .[7], 
            "GOAL": .[8], 
            "GARAGE_STOP": .[9], 
            "GARAGE_TIME": .[10], 
            "SLALOM": .[11], 
            "PETBOTTLE": .[12], 
            "BLOCK_IN_GARAGE": .[13], 
            "BLOCK_YUKOIDO": .[14], 
            "CARD_NUMBER_CIRCLE": .[15], 
            "BLOCK_NUMBER_CIRCLE": .[16], 
            "BLOCK_BINGO": .[17], 
            "ENTRY_BONUS": .[18], 
            "BLOCK_YUKOIDOP": .[19], 
            "BLOCK_YUKOIDOC": .[20], 
            "BLOCK_BINGOP": .[21], 
            "MeasurementMode": .[22]
          })' ${HOME}/Videos/${MP4_DIR}/${{ github.sha }}.csv > ${HOME}/Videos/${MP4_DIR}/${{ github.sha }}.json

        # 環境変数へディレクトリ名を保存
        echo MP4_DIR=$MP4_DIR >> $GITHUB_ENV

    # 走行結果から、走行テストの成否を判定
    - name: Judge
      shell: bash
      run: |
        # スタートできていない場合、テスト失敗
        if [ "`cat ${SIM_LOG_FILE} | grep -coE '\[ launcher: Go!* \]' || :`" == "0" ]; then
          echo "Could not detect START"
          exit 999
        fi

        # 各ゲートを通過したかどうかの確認
        PASSED_START_GATE="`cat ${SIM_LOG_FILE} | \
                            grep -coE '\[ launcher: left: passed Start Gate \]' || :`"
        PASSED_GATE_1="`cat ${SIM_LOG_FILE} | \
                            grep -coE '\[ launcher: left: passed Gate 1 \]' || :`"
        PASSED_GATE_2="`cat ${SIM_LOG_FILE} | \
                            grep -coE '\[ launcher: left: passed Gate 2 \]' || :`"
        PASSED_GALE_GATE="`cat ${SIM_LOG_FILE} | \
                      grep -coE '\[ launcher: left: GOAL!  Goal Time: ([0-9]*\.?[0-9]*) \]' || :`"

        # 走行時間の取得
        if [ "${PASSED_GALE_GATE}" == '0' ]; then
          RESULT_TIME='None'
        else
          RESULT_TIME="`cat ${SIM_LOG_FILE} | \
                        grep -oE '\[ launcher: left: GOAL!  Goal Time: ([0-9]*\.?[0-9]*) \]' | \
                        sed -r 's/^\[ launcher: left: GOAL!  Goal Time: ([0-9]*\.?[0-9]*) \]$/\1/g'` [s]"
        fi

        # ビンゴエリアの結果を一時保存するためのJSONファイルを生成
        TMP_JSON_FILE=$(mktemp --suffix=.json)

        # ビンゴエリアの最終結果を抽出し、一時ファイルに保存
        cat ${HOME}/Videos/${MP4_DIR}/${{ github.sha }}.json | \
          jq '.[] | select(.MeasurementMode=="END")' | \
          jq -s '.' | \
          jq 'max_by(.TIME)' > ${TMP_JSON_FILE}

        # ビンゴエリアの最終結果を集計する
        BLOCK_YUKOIDO=$(jq -r '.BLOCK_YUKOIDO' ${TMP_JSON_FILE})
        POWER_SPOT_YUKOIDO=$(jq -r '.BLOCK_YUKOIDOP' ${TMP_JSON_FILE})
        CENTER_BLOCK_YUKOIDO=$(jq -r '.BLOCK_YUKOIDOC' ${TMP_JSON_FILE})
        BLOCK_BINGO=$(jq -r '.BLOCK_BINGO' ${TMP_JSON_FILE})
        POWERS_POT_BINGO=$(jq -r '.BLOCK_BINGOP' ${TMP_JSON_FILE})

        # タイムの計算
        BLOCK_YUKOIDO_BONUS_TIME=$((BLOCK_YUKOIDO * 1 / 2))
        POWER_SPOT_YUKOIDO_BONUS_TIME=$((POWER_SPOT_YUKOIDO * 1))
        CENTER_BLOCK_YUKOIDO_BONUS_TIME=$((CENTER_BLOCK_YUKOIDO * 2))
        BLOCK_BINGO_BONUS_TIME=$((BLOCK_BINGO * 1))
        POWERS_POT_BINGO_BONUS_TIME=$((POWERS_POT_BINGO * 2))
        BONUS_TIME_SUM=$((BLOCK_YUKOIDO_BONUS_TIME + POWER_SPOT_YUKOIDO_BONUS_TIME + CENTER_BLOCK_YUKOIDO_BONUS_TIME + BLOCK_BINGO_BONUS_TIME + POWERS_POT_BINGO_BONUS_TIME))
        RESULT_TIME=$((RESULT_TIME - BONUS_TIME_SUM))

        # GitHubへ投稿するメッセージの作成
        RESULT_MESSAGE=''
        RESULT_MESSAGE+="|項目|結果|ボーナスタイム[s]|\n"
        RESULT_MESSAGE+="|---|---|---|\n"
        RESULT_MESSAGE+="|スタートゲート通過| ${PASSED_START_GATE} |--|\n"
        RESULT_MESSAGE+="|ゲート1通過| ${PASSED_GATE_1} |--|\n"
        RESULT_MESSAGE+="|ゲート2通過| ${PASSED_GATE_2} |--|\n"
        RESULT_MESSAGE+="|走行タイム| ${RESULT_TIME} |--|\n\n"

        RESULT_MESSAGE+="|ブロックサークル有効移動| ${BLOCK_YUKOIDO} [個]|${BLOCK_YUKOIDO_BONUS_TIME}|\n"
        RESULT_MESSAGE+="|パワースポット有効移動| ${POWER_SPOT_YUKOIDO} [個]|${POWER_SPOT_YUKOIDO_BONUS_TIME}|\n"
        RESULT_MESSAGE+="|センターブロック有効移動| ${CENTER_BLOCK_YUKOIDO} [個]|${CENTER_BLOCK_YUKOIDO_BONUS_TIME}|\n"
        RESULT_MESSAGE+="|ビンゴ| ${BLOCK_BINGO} [列]|${BLOCK_BINGO_BONUS_TIME}|\n"
        RESULT_MESSAGE+="|パワースポットビンゴ| ${POWERS_POT_BINGO} [列]|${POWERS_POT_BINGO_BONUS_TIME}|\n"
        
        RESULT_MESSAGE+="|ボーナスタイム合計|--|${BONUS_TIME_SUM}|\n"
        RESULT_MESSAGE+="|リザルトタイム|--|${RESULT_TIME}|\n"

        RESULT_MESSAGE+="※ 0: 通過失敗, 1: 通過成功\n\n"
        RESULT_MESSAGE+="[:arrow_forward: シミュレータの動画](https://${{ env.MP4_SERVER_NAME }}/01/${{ env.MP4_DIR }}/${{ github.sha }}.mp4)"

        # 生成したメッセージを環境変数へ保存
        echo RESULT_MESSAGE=$RESULT_MESSAGE >> $GITHUB_ENV

    # 走行タイムをコメントとして載せる
    - uses: actions/github-script@0.8.0
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '${{ env.RESULT_MESSAGE }}'
          })
