-----------------------------
---- 以下、SQLite の設定 ----
PRAGMA foreign_keys=true;
---- 以上、SQLite の設定 ----
-----------------------------



--------------------------------------------------
---- 以下、既にテーブルが存在する場合削除する ----
DROP TABLE IF EXISTS left_info;
DROP TABLE IF EXISTS right_info;

-- 下記ののテーブルはトリガーによってのみ更新される
DROP TABLE IF EXISTS control_info;
DROP TABLE IF EXISTS left_info_access_log;
DROP TABLE IF EXISTS right_info_access_log;
---- 以上、既にテーブルが存在する場合削除する ----
--------------------------------------------------



------------------------------
---- 以下、テーブルの作成 ----
CREATE TABLE left_info(
    ID INTEGER PRIMARY KEY,

    -- 各ブロックの配置情報
    RED1 TEXT DEFAULT '',
    RED2 TEXT DEFAULT '',
    YELLOW1 TEXT DEFAULT '',
    YELLOW2 TEXT DEFAULT '',
    BLUE1 TEXT DEFAULT '',
    BLUE2 TEXT DEFAULT '',
    GREEN1 TEXT DEFAULT '',
    GREEN2 TEXT DEFAULT '',

    -- 各ブロックの配置情報へのアクセス回数を数える
    RED1_ACCESS_COUNTER INTEGER DEFAULT 0,
    RED2_ACCESS_COUNTER INTEGER DEFAULT 0,
    YELLOW1_ACCESS_COUNTER INTEGER DEFAULT 0,
    YELLOW2_ACCESS_COUNTER INTEGER DEFAULT 0,
    BLUE1_ACCESS_COUNTER INTEGER DEFAULT 0,
    BLUE2_ACCESS_COUNTER INTEGER DEFAULT 0,
    GREEN1_ACCESS_COUNTER INTEGER DEFAULT 0,
    GREEN2_ACCESS_COUNTER INTEGER DEFAULT 0
);

CREATE TABLE right_info(
    ID INTEGER PRIMARY KEY,

    -- 各ブロックの配置情報
    RED1 TEXT DEFAULT '',
    RED2 TEXT DEFAULT '',
    YELLOW1 TEXT DEFAULT '',
    YELLOW2 TEXT DEFAULT '',
    BLUE1 TEXT DEFAULT '',
    BLUE2 TEXT DEFAULT '',
    GREEN1 TEXT DEFAULT '',
    GREEN2 TEXT DEFAULT '',

    -- 各ブロックの配置情報へのアクセス回数を数える
    RED1_ACCESS_COUNTER INTEGER DEFAULT 0,
    RED2_ACCESS_COUNTER INTEGER DEFAULT 0,
    YELLOW1_ACCESS_COUNTER INTEGER DEFAULT 0,
    YELLOW2_ACCESS_COUNTER INTEGER DEFAULT 0,
    BLUE1_ACCESS_COUNTER INTEGER DEFAULT 0,
    BLUE2_ACCESS_COUNTER INTEGER DEFAULT 0,
    GREEN1_ACCESS_COUNTER INTEGER DEFAULT 0,
    GREEN2_ACCESS_COUNTER INTEGER DEFAULT 0
);

CREATE TABLE left_info_access_log(
    ID INTEGER NOT NULL,
    BLOCK TEXT NOT NULL CHECK(
        BLOCK = 'RED1' OR
        BLOCK = 'RED2' OR
        BLOCK = 'YELLOW1' OR
        BLOCK = 'YELLOW2' OR
        BLOCK = 'BLUE1' OR
        BLOCK = 'BLUE2' OR
        BLOCK = 'GREEN1' OR
        BLOCK = 'GREEN2'
    ),
    ACCESS_COUNTER_AFTER INTEGER NOT NULL,
    ACCESS_TIME TEXT DEFAULT (STRFTIME('%Y-%m-%dT%H:%M:%fZ', 'now')) NOT NULL,  -- UTC,ミリ秒まで
    FOREIGN KEY (ID) REFERENCES left_info(ID)
);

CREATE TABLE right_info_access_log(
    ID INTEGER NOT NULL,
    BLOCK TEXT NOT NULL CHECK(
        BLOCK = 'RED1' OR
        BLOCK = 'RED2' OR
        BLOCK = 'YELLOW1' OR
        BLOCK = 'YELLOW2' OR
        BLOCK = 'BLUE1' OR
        BLOCK = 'BLUE2' OR
        BLOCK = 'GREEN1' OR
        BLOCK = 'GREEN2'
    ),
    ACCESS_COUNTER_AFTER INTEGER NOT NULL,
    ACCESS_TIME TEXT DEFAULT (STRFTIME('%Y-%m-%dT%H:%M:%fZ', 'now')) NOT NULL,  -- UTC,ミリ秒まで
    FOREIGN KEY (ID) REFERENCES left_info(ID)
);

CREATE TABLE control_info(
    left_current_id INTEGER DEFAULT 1 NOT NULL CHECK (
        left_current_id > 0
    ),
    FOREIGN KEY (left_current_id) REFERENCES left_info(ID)
);

---- 以上、テーブルの作成 ----
------------------------------



------------------------------
---- 以下、トリガーの作成 ----

-- 以下、left_info テーブルへのトリガーの設定
CREATE TRIGGER LEFT_RED1_TRG AFTER UPDATE OF RED1_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'RED1', NEW.RED1_ACCESS_COUNTER);
END;

CREATE TRIGGER LEFT_RED2_TRG AFTER UPDATE OF RED2_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'RED2', NEW.RED2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER LEFT_YELLOW1_TRG AFTER UPDATE OF YELLOW1_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'YELLOW1', NEW.YELLOW1_ACCESS_COUNTER);
END;

CREATE TRIGGER LEFT_YELLOW2_TRG AFTER UPDATE OF YELLOW2_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'YELLOW2', NEW.YELLOW2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER LEFT_BLUE1_TRG AFTER UPDATE OF BLUE1_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'BLUE1', NEW.BLUE1_ACCESS_COUNTER);
END;

CREATE TRIGGER LEFT_BLUE2_TRG AFTER UPDATE OF BLUE2_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'BLUE2', NEW.BLUE2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER LEFT_GREEN1_TRG AFTER UPDATE OF GREEN1_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'GREEN1', NEW.GREEN1_ACCESS_COUNTER);
END;

CREATE TRIGGER LEFT_GREEN2_TRG AFTER UPDATE OF GREEN2_ACCESS_COUNTER ON left_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'GREEN2', NEW.GREEN2_ACCESS_COUNTER);
END;

-- 以下、right_info テーブルへのトリガーの設定
CREATE TRIGGER RIGHT_RED1_TRG AFTER UPDATE OF RED1_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'RED1', NEW.RED1_ACCESS_COUNTER);
END;

CREATE TRIGGER RIGHT_RED2_TRG AFTER UPDATE OF RED2_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'RED2', NEW.RED2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER RIGHT_YELLOW1_TRG AFTER UPDATE OF YELLOW1_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'YELLOW1', NEW.YELLOW1_ACCESS_COUNTER);
END;

CREATE TRIGGER RIGHT_YELLOW2_TRG AFTER UPDATE OF YELLOW2_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'YELLOW2', NEW.YELLOW2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER RIGHT_BLUE1_TRG AFTER UPDATE OF BLUE1_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'BLUE1', NEW.BLUE1_ACCESS_COUNTER);
END;

CREATE TRIGGER RIGHT_BLUE2_TRG AFTER UPDATE OF BLUE2_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'BLUE2', NEW.BLUE2_ACCESS_COUNTER);
END;

------
CREATE TRIGGER RIGHT_GREEN1_TRG AFTER UPDATE OF GREEN1_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'GREEN1', NEW.GREEN1_ACCESS_COUNTER);
END;

CREATE TRIGGER RIGHT_GREEN2_TRG AFTER UPDATE OF GREEN2_ACCESS_COUNTER ON right_info
BEGIN
    INSERT INTO left_info_access_log(ID, BLOCK, ACCESS_COUNTER_AFTER) VALUES(OLD.ID, 'GREEN2', NEW.GREEN2_ACCESS_COUNTER);
END;

---- 以上、トリガーの作成 ----
------------------------------